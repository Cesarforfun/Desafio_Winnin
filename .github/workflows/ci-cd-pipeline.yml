name: Node.js CI/CD - Desafio Winnin

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main, develop ]

env:
  REGISTRY: docker.io
  IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/cesar4fun/desafio_winnin
  CLUSTER_NAME: desafio-winnin
  AWS_REGION: us-east-1

jobs:
  # Job de análise estática
  static-analysis:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run ESLint
      run: npx eslint . --format json --output-file eslint-report.json || true

    - name: Run npm audit
      run: npm audit --json > npm-audit.json || true

    - name: Run Snyk security scan
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high --json-file-output=snyk-report.json

    - name: Upload analysis results
      uses: actions/upload-artifact@v3
      with:
        name: static-analysis-results
        path: |
          *.json

  # Job de build e teste
  build-and-test:
    runs-on: ubuntu-latest
    needs: static-analysis
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run tests
      run: npm test

    - name: Build application
      run: npm run build --if-present

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Login to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: ${{ github.event_name != 'pull_request' }}
        tags: |
          ${{ env.IMAGE_NAME }}:latest
          ${{ env.IMAGE_NAME }}:${{ github.sha }}
        cache-from: type=registry,ref=${{ env.IMAGE_NAME }}:buildcache
        cache-to: type=registry,ref=${{ env.IMAGE_NAME }}:buildcache,mode=max

  # Job de análise dinâmica (DAST)
  dynamic-analysis:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.event_name != 'pull_request'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run OWASP ZAP baseline scan
      uses: zaproxy/action-baseline@v0.10.0
      with:
        target: 'http://localhost:3000'  # Ajuste a porta se necessário
        rules_file_name: '.zap/rules.tsv'
        cmd_options: '-a'

    - name: Upload ZAP report
      uses: actions/upload-artifact@v3
      with:
        name: zap-scan-results
        path: zap-report.html

  # Job de deploy na AWS
  deploy-to-aws:
    runs-on: ubuntu-latest
    needs: 
      - build-and-test
      - dynamic-analysis
    if: github.event_name != 'pull_request' && github.ref == 'refs/heads/main'
    environment: production
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Set up Kubernetes tools
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'

    - name: Update kubeconfig for EKS
      run: |
        aws eks update-kubeconfig \
          --region ${{ env.AWS_REGION }} \
          --name ${{ env.CLUSTER_NAME }}

    - name: Deploy to EKS
      run: |
        # Substituir placeholders nos arquivos YAML
        sed -i "s|{{IMAGE_TAG}}|${{ github.sha }}|g" kubernetes/deployment.yaml
        sed -i "s|{{DOCKERHUB_USERNAME}}|${{ secrets.DOCKERHUB_USERNAME }}|g" kubernetes/deployment.yaml
        
        # Aplicar os manifests do Kubernetes
        kubectl apply -f kubernetes/deployment.yaml
        kubectl apply -f kubernetes/service.yaml
        kubectl apply -f kubernetes/ingress.yaml
        
        # Verificar status do deployment
        kubectl rollout status deployment/node-app-deployment -n production --timeout=300s
        
        # Verificar serviços
        kubectl get services -n production
        kubectl get ingress -n production

    - name: Verify deployment
      run: |
        # Aguardar aplicação ficar disponível
        sleep 30
        
        # Obter URL do ingress
        INGRESS_HOST=$(kubectl get ingress node-app-ingress -n production -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
        echo "A aplicação está disponível em: http://$INGRESS_HOST"
        
        # Testar health check
        curl -f http://$INGRESS_HOST/health || echo "Health check falhou inicialmente"
        
        # Salvar URL para uso posterior
        echo "APP_URL=http://$INGRESS_HOST" >> $GITHUB_ENV

    - name: Run smoke tests against deployed app
      run: |
        if [ -n "$APP_URL" ]; then
          curl -f $APP_URL/health || exit 1
          echo "Smoke tests passed!"
        else
          echo "APP_URL not set, skipping smoke tests"
        fi