name: Node.js CI/CD to Docker Desktop

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  IMAGE_NAME: cesar4fun/desafio_winnin
  CONTAINER_NAME: desafio_winnin
  APP_PORT: 5005

jobs:
  # Job de análise estática
  static-analysis:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run ESLint
      run: npx eslint . --format json --output-file eslint-report.json || true

    - name: Run npm audit
      run: npm audit --json > npm-audit.json || true

    - name: Upload analysis results
      uses: actions/upload-artifact@v3
      with:
        name: static-analysis-results
        path: |
          *.json

  # Job de build e teste
  build-and-test:
    runs-on: ubuntu-latest
    needs: static-analysis
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run tests
      run: npm test

    - name: Build application
      run: npm run build --if-present

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Build Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        tags: ${{ env.IMAGE_NAME }}:latest
        cache-from: type=registry,ref=${{ env.IMAGE_NAME }}:buildcache
        cache-to: type=registry,ref=${{ env.IMAGE_NAME }}:buildcache,mode=max

  # Job de análise dinâmica (DAST)
  dynamic-analysis:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.event_name != 'pull_request'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Build test container
      run: docker build -t ${{ env.IMAGE_NAME }}-test .

    - name: Run container for testing
      run: |
        docker run -d -p 5005:5005 --name ${{ env.IMAGE_NAME }}-test ${{ env.IMAGE_NAME }}-test
        sleep 10

    - name: Run OWASP ZAP baseline scan
      uses: zaproxy/action-baseline@v0.10.0
      with:
        target: 'http://localhost:5005'
        rules_file_name: '.zap/rules.tsv'
        cmd_options: '-a'

    - name: Cleanup test container
      run: |
        docker stop ${{ env.IMAGE_NAME }}-test || true
        docker rm ${{ env.IMAGE_NAME }}-test || true

    - name: Upload ZAP report
      uses: actions/upload-artifact@v3
      with:
        name: zap-scan-results
        path: zap-report.html

  # Job de deploy local (manual trigger)
  deploy-local:
    runs-on: ubuntu-latest
    needs: 
      - build-and-test
      - dynamic-analysis
    if: github.event_name != 'pull_request' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Generate deployment script
      run: |
        cat > deploy-local.sh << 'EOF'
        #!/bin/bash
        echo "Parando container existente..."
        docker stop ${{ env.CONTAINER_NAME }} || true
        docker rm ${{ env.CONTAINER_NAME }} || true
        
        echo "Construindo nova imagem..."
        docker build -t ${{ env.IMAGE_NAME }}:latest .
        
        echo "Executando container..."
        docker run -d \
          -p ${{ env.APP_PORT }}:5005 \
          --name ${{ env.CONTAINER_NAME }} \
          --restart unless-stopped \
          ${{ env.IMAGE_NAME }}:latest
        
        echo "Aguardando aplicação iniciar..."
        sleep 10
        
        echo "Verificando saúde da aplicação..."
        curl -f http://localhost:${{ env.APP_PORT }}/health || echo "Aplicação pode estar iniciando ainda..."
        
        echo "Deploy concluído! Acesse: http://localhost:${{ env.APP_PORT }}"
        EOF

        chmod +x deploy-local.sh

    - name: Generate docker-compose file
      run: |
        cat > docker-compose.yml << 'EOF'
        version: '3.8'
        services:
          app:
            image: ${{ env.IMAGE_NAME }}:latest
            build: .
            ports:
              - "${{ env.APP_PORT }}:5005"
            environment:
              - NODE_ENV=production
              - PORT=5005
            restart: unless-stopped
            healthcheck:
              test: ["CMD", "curl", "-f", "http://localhost:5005/health"]
              interval: 30s
              timeout: 10s
              retries: 3
        EOF

    - name: Generate documentation
      run: |
        cat > DEPLOYMENT-GUIDE.md << 'EOF'
        # Guia de Deploy Local

        ## Opção 1: Script de deploy (Recomendado)
        Execute o script de deploy:
        ```bash
        chmod +x deploy-local.sh
        ./deploy-local.sh
        ```

        ## Opção 2: Docker Compose
        ```bash
        docker-compose up -d --build
        ```

        ## Opção 3: Comandos manuais
        ```bash
        # Parar container existente
        docker stop ${{ env.CONTAINER_NAME }} || true
        docker rm ${{ env.CONTAINER_NAME }} || true

        # Construir imagem
        docker build -t ${{ env.IMAGE_NAME }}:latest .

        # Executar container
        docker run -d \
          -p ${{ env.APP_PORT }}:5005 \
          --name ${{ env.CONTAINER_NAME }} \
          --restart unless-stopped \
          ${{ env.IMAGE_NAME }}:latest

        # Verificar status
        docker logs ${{ env.CONTAINER_NAME }}
        curl http://localhost:${{ env.APP_PORT }}/health
        ```

        ## Comandos úteis
        - Ver logs: `docker logs ${{ env.CONTAINER_NAME }}`
        - Parar aplicação: `docker stop ${{ env.CONTAINER_NAME }}`
        - Remover container: `docker rm ${{ env.CONTAINER_NAME }}`
        - Listar containers: `docker ps -a`
        - Listar imagens: `docker images`

        A aplicação estará disponível em: http://localhost:${{ env.APP_PORT }}
        EOF

    - name: Upload deployment artifacts
      uses: actions/upload-artifact@v3
      with:
        name: deployment-files
        path: |
          deploy-local.sh
          docker-compose.yml
          DEPLOYMENT-GUIDE.md

    - name: Show deployment instructions
      run: |
        echo "=============================================="
        echo "🚀 DEPLOYMENT FILES GENERATED SUCCESSFULLY!"
        echo "=============================================="
        echo ""
        echo "Download the artifacts to deploy locally:"
        echo "1. deploy-local.sh - Automated deployment script"
        echo "2. docker-compose.yml - Docker Compose configuration"
        echo "3. DEPLOYMENT-GUIDE.md - Complete deployment guide"
        echo ""
        echo "After deployment, access your application at:"
        echo "http://localhost:${{ env.APP_PORT }}"
        echo ""
        echo "To deploy manually, run:"
        echo "docker build -t ${{ env.IMAGE_NAME }} ."
        echo "docker run -d -p ${{ env.APP_PORT }}:5005 --name ${{ env.CONTAINER_NAME }} ${{ env.IMAGE_NAME }}"